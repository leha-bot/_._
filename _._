// Licensed under the MIT License <http://opensource.org/licenses/MIT>.
// SPDX-License-Identifier: MIT
// Copyright (c) 2019 Victor Zverovich.
// Copyright (c) 2019 Daniil Goncharov <neargye@gmail.com>.
//
// Permission is hereby  granted, free of charge, to any  person obtaining a copy
// of this software and associated  documentation files (the "Software"), to deal
// in the Software  without restriction, including without  limitation the rights
// to  use, copy,  modify, merge,  publish, distribute,  sublicense, and/or  sell
// copies  of  the Software,  and  to  permit persons  to  whom  the Software  is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE  IS PROVIDED "AS  IS", WITHOUT WARRANTY  OF ANY KIND,  EXPRESS OR
// IMPLIED,  INCLUDING BUT  NOT  LIMITED TO  THE  WARRANTIES OF  MERCHANTABILITY,
// FITNESS FOR  A PARTICULAR PURPOSE AND  NONINFRINGEMENT. IN NO EVENT  SHALL THE
// AUTHORS  OR COPYRIGHT  HOLDERS  BE  LIABLE FOR  ANY  CLAIM,  DAMAGES OR  OTHER
// LIABILITY, WHETHER IN AN ACTION OF  CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#ifndef ASSTREAM_H
#define ASSTREAM_H

#include <iostream>

namespace {

// A simple stream.
struct asstream {
  struct tag {};
  tag _;

  tag& operator*(asstream&) { return _; }
} _;

// Push (shove) operator.
template <typename T>
std::ostream& operator<<(asstream::tag&, const T& o) {
  std::cout << o;
  return std::cout;
}

// Pull operator.
template <typename T>
std::istream& operator>>(asstream::tag&, T& o) {
  std::cin >> o;
  return std::cin;
}

// A simple stream which is also wide.
struct wide_asstream {
  struct tag {};
  tag __;

  tag& operator*(wide_asstream&) { return __; }
} __;

template <typename T>
std::wostream& operator<<(wide_asstream::tag&, const T& o) {
  std::wcout << o;
  return std::wcout;
}

template <typename T>
std::wistream& operator>>(wide_asstream::tag&, T& o) {
  std::wcin >> o;
  return std::wcin;
}

} // namespace

#endif
